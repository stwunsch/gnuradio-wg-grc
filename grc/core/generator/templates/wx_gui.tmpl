## All template parts which are dependend on the generate options are set in this
## file. The static parts are inherited.

<%inherit file="base.tmpl"/>

<%block name="shebang">\
#!/usr/bin/env python2
</%block>

<%block name="xinit">\

if __name__ == '__main__':
    import ctypes
    import sys
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print "Warning: failed to XInitThreads()"
</%block>

<%block name="class_init">
##<%! import gtk %>
##<% icon = gtk.IconTheme().lookup_icon('gnuradio-grc', 32, 0) %>
class ${self.class_name}(grc_wxgui.top_block_gui):

    def __init__(${self.param_str}):
        grc_wxgui.top_block_gui.__init__(self, title="${title}")
##%if icon:
##        _icon_path = "${icon}.get_filename()"
##        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))
##%endif
</%block>

<%block name="argument_parser">
## Set argument_parser function
<%def name="make_default(type, param)">
    %if type == 'eng_float':
eng_notation.num_to_str(${param}.get_make())
    %else:
${param}.get_make()
    %endif
</%def>\
<%def name="make_short_id(param)">
    <% short_id = param.get_param('short_id').get_evaluated() %>
    %if short_id:
        <% short_id = '-' + short_id %>
    %endif
${short_id}
</%def>\
<% self.params_eq_list = list() %>\
%if parameters:

def argument_parser():
<% arg_parser_args = '' %>\
    %if flow_graph.get_option('description'):
<% arg_parser_args = 'description=description' %>\
    description = repr(flow_graph.get_option('description'))
    %endif
    parser = ArgumentParser(${arg_parser_args})
    %for param in parameters:
<% type = param.get_param('type').get_value() %>\
        %if type:
## FIXME: test me: the next line should equal this: #silent $params_eq_list.append('%s=options.%s'%($param.get_id(), $param.get_id()))
<% self.params_eq_list.append('{}=options.{}'.format(param.get_id(), param.get_id())) %>\
    parser.add_argument(
        %if make_short_id(param):
        "${make_short_id(param)}", \
        %endif
        "--${param.get_id().replace('_', '-')}", dest="${param.get_id()}", type=${type}, default=${make_default(type, param)},
        help="Set ${param.get_param('label').get_evaluated() or param.get_id()} [default=%(default)r]")
        %endif
    %endfor
    return parser
%endif
</%block>

<%block name="main">
## Set main function
def main(top_block_cls=${self.class_name}, options=None):
    %if parameters:
    if options is None:
        options = argument_parser().parse_args()
    %endif
    %if flow_graph.get_option('realtime_scheduling'):
    if gr.enable_realtime_scheduling() != gr.RT_OK:
        print "Error: failed to enable real-time scheduling."
    %endif

    tb = top_block_cls(${', '.join(self.params_eq_list)})
        %if flow_graph.get_option('max_nouts'):
    tb.Run(${flow_graph.get_option('run')}, ${flow_graph.get_option('max_nouts')})
        %else:
    tb.Start(${flow_graph.get_option('run')})
        %for m in monitors:
    (tb.${m.get_id()}).start()
        %endfor
    tb.Wait()
        %endif


if __name__ == '__main__':
    main()
</%block>
